import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;


public class TwoSumProblem {

    private static int[] arr = {-90, 61, 59, 27, 14, -41, -30, 59, -16, 16, 26, -12, 23, 58, 2, 66, -100, -69, -19, 26, 77, 71, 45, 3, -74, -29, 33, 74, 21, -65, -57, 15, 1, 16, 51, 
        76, -82, 2, -56, 86, 12, 15, -14, -88, 35, 69, -45, -14, 19, 11, -75, 53, -12, -8, 31, -35, -65, -26, -46, 55, 61, -48, -38, -18, 39, -42, 60, 36, -35, 35, -14, -58, -58, 18, 18, 92, -53, 6, -91, -19, -25, 62, 81, 76, -31, 25, -54, 91, 39, 62, -9, -40, 5, 79, 76, 31, 40, -86, 36, -91, 95, -85, 16, -76, -20, 70, -22, -89, 83, 7, -7, -43, 63, -35, 62, -59, -4, -10, -14, -27, -4, 20, -64, -24, -88, -6, -30, -27, -9, 3, -35, -55, -78, -59, -60, 15, 39, 
        46, -72, -14, 53, 0, -100, 79, -72, 15, 5, 44, -66, -37, 0, 54, -2, 20, -78, 14, -3, -17, -44, 4, 71, -43, 47, 96, 2, 0, -80, -37, 21, -62, -42, -86,2 
        ,4, -18, -54, -59, -42, 37, -4, 8, -77, 61, -46, 69, 7, -60, 37, 5, 63, 89, -80, 55, -3, -35, 48, -48, -10, -75, 78, -34, 19, 95, 51, -60, -17, 61, 40, 
        -94, 86, -9, -46, 6, 77, 86, -21, 63, 34, 9, -18, 57, -89, 37, -52, -29, 66, -31, -89, 32, 88, -42, 53, -90, -74, 36, 50, -55, 94, -47, -11, -57, 23, 90, 32, 93, 73, 96, 53, -80, -12, -68, 69, 68, 50, -70, -90, -77, 71, -63, -96, 89, -69, 5, -95, -33, 23, -11, 25, 52, 3, -44, 44, 86, 24, -46, -94, -17, -40, -22, 20, -28, -40, 6, 54, -52, 58, 76, 14, -26, -82, 33, 14, -15, -79, 12, 70, -11, 75, -1, -5, -91, 35, -40, -51, 4, -43, 37, 42, 37, -3, 55,- 
        7, -43, -18, -42, -99, -47, -89, -83, 20, 44, -33, 66, -70, -19, -67, -21, 95, -26, 5, -58, 87, -56, 98, 35, -56, -19, 18, 76, 97, 46, 10, -61, -12, 18, 74, -26, 56, -73, 75, -34, -74, -75, -35, 93, -69, 88, 74, 43, 99, -32, 21, 84, 62, 34, -92, -27, 78, -91, -3, 20, -5, -30, -59, -27, -3, -1, 60, -96, -78, -54, -75, -26, 72, 96, 12, 40, 55, -19, 80, -98, -49, 44, -72, 78, 79, 97, -57, -54, -94, 42, 42, 88, 53, 82, 59, 72, 45, 76, -24, 53, -89, -17, -26, -91, -58, -66, -31, -19, 22, 40, 95, -96, -31, -37, 38, -35, 64, 67, 11, -88, 23, -41, -27, 43, -43, -94, 7, 87, -25, -9, 98, 52, -44, 17, 53, 79, -35, -20, -60, 41, -57, 95, -54, 78, 99, 66, -34, -35, -21, 71, 34, -54, 61, 97, 38, 54, 56, -79, -31, 89, -67, 74, -47, 61, -77, 19, -53, -54, 41, 1, 60, -52, -17, -16, -44, 33, 99, 96, 27, -43, 44, 46, 16, 71, -78, -59, -70, -28, -100, 55, -76, -87, 18, 57, 14, -92, -43, 76, 6, -45, -31, -5, -7, 64, 55, -58, -54, 2, -80, 100, -84, 19, 44, 61, -82, -47, -100, -29, 41, 98, 48, -68, -88, 26, 81, 83, 69, -93, -82, -56, 33, -62, 68, 65, -55, -38, 71, -18, -32, 91, 39, 66, -10, 42, -35, -26, -86, -94, -96, -18, -31, 2, -30, 90, 41, 3, 0, 12, 19, -93, 1, -6, 20, 33, 26, 15, 88, 90, -77, 64, 98, 32, 18, 34, 29, -39, 0, 99, 58, 65, 90, 56, -24, 100, -86, 70, -93, -25, 100, 8, -32, -28, 49, -25, 49, -54, -47, -28, -69, 18, 28, 59, 91, 49, -56, -8, -91, 11, 26, 55, 28, -56, 49, 100, -61, -75, -24, -62, -37, -3, 94, -11, 76, -93, 48, -69, 94, -90, -82, -12, -15, -69, 90, -52, -100, 10, -70, 0, -3, 92, 67, -26, 90, 46, 37, 98, -94, -97, 23, 42, -18, -79, -32, -54, -100, -9, 64, -63, -13, 39, -70, -97, -51, 58, -69, 13, 71, -98, 95, 51, 50, 19, 21, 48, -21, -62, 21, 21, -51, 77, -18, -25, 28, -99, 49, 79, 22, 70, -34, -74, 38, 86, -97, -2, 88, -69, -48, 69, -26, 0, 62, -50, -95, 26, -25, 22, 56, 25, 20, 100, 56, 80, -24, 92, 33, 48, 58, 55, 42, -42, -64, 47, 17, -5, 24, -90, -46, -96, 93, 83, 88, 89, 34, -7, 63, 4, -20, 85, -73, 3, -46, -88, -9, 22, -29, 82, -85, 19, -12, 77, -88, -61, 68, 7, -13, 53, -2, -68, -69, -18, 31, 36, 10, 42, -67, -47, -48, -57, 13, -89, -6, -51, -9, -70, -69, 11, 27, 
        35, -89, -46, 88, -16, 98, -60, -47, -4, 56, 34, 99, -76, -19, 63, 33, -24, 11, -37, 20, -82, 8, 13, 61, -9, -36, -50, -95, 77, 75, 35, -39, -29, 44, -49, -97, 0, 64, 38, -45, -48, -75, -97, 93, 16, -96, -50, 40, 57, 83, 61, 32, 94, 70, -55, -26, -90, 40, 8, -69, -51, 70, 87, 7, -87, 62, 83, -70, 74, 
        -51, -47, 23, 99, 3, -49, -29, -35, 15, 73, 58, 20, 17, -100, 89, -48, 39, -2, 6, 80, 75, -9, 72, -97, 76, -42, -7, 20, 11, -96, -74, -37, -85, 74, 33, -24, 24, 46, 62, -40, -29, 19, -24, 64, 83, -57, -66, -56, 17, -17, -82, -48, 45, 64, -32, 45, -62, -95, 65, 14, -73, 10, 84, -39, -72, -47, -61, -48, 29, 64, -66, 24, 22, -66, -47, -90, 80, 50, 79, -45, -54, -83, -86, -1, 55, 53, 63, -60, -4, 100, 26, -82, 60, 66, -43, -34, 61, 59, 82, -82, 95, 36, 
        -3, 19, 61, 39, -31, 0, 99, -21, -13, 37, 33, -11, 52, 19, -1, -50, -34, 83, -96, -54, -28, 42, -32, -98, -43, 45, -56, 31, 64, -36, -17, 75, -10, 50, 
        -56, -7, -6, -12, 56, 101, -33, 101};
    private static int k = 202;

    public static void main(String[] args){
        Instant starttime = Instant.now();
        BruteForce();
        Instant endtime = Instant.now();
        Duration duration = Duration.between(starttime, endtime);
        System.out.println("Total execution tim: " + duration.toMillis() + "milliseconds");
        starttime = Instant.now();
        Efficent();
        endtime = Instant.now();
        duration = Duration.between(starttime, endtime);
        System.out.println("Total execution tim: " + duration.toMillis() + "milliseconds");

        //printArray(generateRandomArray(1000));
    }

    private static void BruteForce(){
            for (int i = 0; i < arr.length - 1; i++) {
                for (int j = 0; j < arr.length - 1; j++) {
                    if (arr[i] + arr[j + 1] == k) {
                        System.out.println("\n "+ k + " was found with " + arr[i] + "(" + i + ")" + " and " + arr[j + 1] + "(" + j + ")" + " in second loop");
                        return;
                    }   
                }
            }
    }

    private static void Efficent(){
        Map<Integer, Integer> numToIndex = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            int complement = k - arr[i];
            if (numToIndex.containsKey(complement)) {
                return;
            }
            numToIndex.put(arr[i], i);
        }
        return;
    }

    public static int[] generateRandomArray(int length) {
        int[] array = new int[length];
        Random random = new Random();

        for (int i = 0; i < length; i++) {
            // Generate a random integer between -100 and 100 (inclusive)
            array[i] = random.nextInt(201) - 100;
        }
        return array;
    }

    public static void printArray(int[] array) {
        System.out.print("[");
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i]);
            if (i < array.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }
}
